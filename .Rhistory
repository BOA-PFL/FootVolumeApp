fileInput("csv_input", "Select CSV File to Import", accept = ".csv"),
selectInput("num_var_1", "Numerical Variable 1", choices = c(not_sel)),
selectInput("num_var_2", "Numerical Variable 2", choices = c(not_sel)),
selectInput("fact_var", "Factor Variable", choices = c(not_sel)),
sliderInput("ShoeSize", label = h3("Select Shoe Size"), min = 5,
max = 15, value = 9),
br(),
actionButton("run_button", "Run Analysis", icon = icon("play"))
),
mainPanel(
tabsetPanel(
tabPanel(
title = "Plot",
plotOutput("plot_1"),
),
# tabPanel(
#      title = "Data Table",
#      fluidRow(
#        column(width = 4, tableOutput("mytable")),
# ),
tabPanel(
title = "Statistics",
fluidRow(
column(width = 4, strong(textOutput("num_var_1_title"))),
column(width = 4, strong(textOutput("num_var_2_title"))),
column(width = 4, strong(textOutput("fact_var_title")))
),
fluidRow(
column(width = 4, tableOutput("num_var_1_summary_table")),
column(width = 4, tableOutput("num_var_2_summary_table")),
column(width = 4, tableOutput("fact_var_summary_table"))
),
fluidRow(
column(width = 12, strong("Combined Statistics"))
),
fluidRow(
column(width = 12, tableOutput("combined_summary_table"))
),
tabPanel(
title = "Plot",
plotOutput("plot_1"),
)
)
)
)
)
)
# )
draw_plot_1 <- function(data_input, num_var_1, num_var_2, fact_var){
if(fact_var!=not_sel){
data_input[,(fact_var):= as.factor(data_input[,get(fact_var)])]
}
if(num_var_1 != not_sel & num_var_2 != not_sel & fact_var != not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2, color = fact_var)) +
geom_point()
}
else if(num_var_1 != not_sel & num_var_2 != not_sel & fact_var == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point()
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & fact_var != not_sel){
ggplot(data = data_input,
aes_string(x = fact_var, y = num_var_1)) +
geom_violin()
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & fact_var != not_sel){
ggplot(data = data_input,
aes_string(x = fact_var, y = num_var_2)) +
geom_violin()
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & fact_var == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1)) +
geom_histogram()
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & fact_var == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_2)) +
geom_histogram()
}
else if(num_var_1 == not_sel & num_var_2 == not_sel & fact_var != not_sel){
ggplot(data = data_input,
aes_string(x = fact_var)) +
geom_bar()
}
}
create_num_var_table <- function(data_input, num_var){
if(num_var != not_sel){
col <- data_input[,get(num_var)]
if (length(col)>5000) col_norm <- sample(col,5000) else col_norm <- col
norm_test <- shapiro.test(col_norm)
statistic <- c("mean", "median", "5th percentile", "50th percentile", "95th percentile"
)
value <- c(round(mean(col),2), round(median(col),2),
round(quantile(col, 0.05),2),round(quantile(col,0.5),2), round(quantile(col, 0.95),2)
)
data.table(statistic, value)
}
}
create_fact_var_table <- function(data_input, fact_var){
if(fact_var != not_sel){
freq_tbl <- data_input[,.N, by = get(fact_var)]
freq_tbl <- setnames(freq_tbl,c("factor_value", "count"))
freq_tbl
}
}
create_combined_table <- function(data_input, num_var_1, num_var_2, fact_var){
if(fact_var != not_sel){
if(num_var_1 != not_sel & num_var_2 != not_sel){
res_tbl <- data_input[,.(correlation = cor(get(num_var_1), get(num_var_2))), by = fact_var]
}
else if(num_var_1 != not_sel & num_var_2 == not_sel){
res_tbl <- data_input[,.(mean = mean(get(num_var_1))), by = fact_var]
}
else if(num_var_1 == not_sel & num_var_2 != not_sel){
res_tbl <- data_input[,.(mean = mean(get(num_var_2))), by = fact_var]
}
}
else if(num_var_1 != not_sel & num_var_2 != not_sel){
res_tbl <- data.table(
statistic = c("correlation"),
value = c(cor(
data_input[,get(num_var_1)],
data_input[,get(num_var_2)])))
}
return(res_tbl)
}
ui <- navbarPage(
title = "BOA Foot Volumes via BigData",
theme = shinytheme('superhero'),
main_page,
about_page
)
server <- function(input, output){
options(shiny.maxRequestSize=10*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "fact_var", choices = choices)
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
fact_var <- eventReactive(input$run_button,input$fact_var)
# plot
SummaryPlot <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), fact_var())
})
output$plot_1 <- renderPlot(SummaryPlot())
df_subset <- reactive({
a <- subset(data_input(), ShoeSize == input$ShoeSize)
return(a)
})
output$mytable = DT::renderDataTable({
df_subset()
})
output$SummaryPlot <- renderPlot({
ggplot(data = df_subset(), mapping=aes(x = Instep, color = Sex, fill = Sex)) +
geom_density() + facet_wrap(~Sex)
})
# 1-d summary tables
output$num_var_1_title <- renderText(paste("Num Var 1:",num_var_1()))
num_var_1_summary_table <- eventReactive(input$run_button,{
create_num_var_table(data_input(), num_var_1())
})
output$num_var_1_summary_table <- renderTable(num_var_1_summary_table(),colnames = FALSE)
output$num_var_2_title <- renderText(paste("Num Var 2:",num_var_2()))
num_var_2_summary_table <- eventReactive(input$run_button,{
create_num_var_table(data_input(), num_var_2())
})
output$num_var_2_summary_table <- renderTable(num_var_2_summary_table(),colnames = FALSE)
output$fact_var_title <- renderText(paste("Factor Var:",fact_var()))
fact_var_summary_table <- eventReactive(input$run_button,{
create_fact_var_table(data_input(), fact_var())
})
output$fact_var_summary_table <- renderTable(fact_var_summary_table(),colnames = FALSE)
# multi-d summary table
combined_summary_table <- eventReactive(input$run_button,{
create_combined_table(data_input(), num_var_1(), num_var_2(), fact_var())
})
output$combined_summary_table <- renderTable(combined_summary_table())
output$mytable = DT::renderDataTable({
df_subset()
})
}
shinyApp(ui = ui, server = server)
runApp('GitHub/DataAnalysisApp')
shiny::runApp('GitHub/DataAnalysisApp')
runApp('PFL/Coding/App WIP/V2')
runApp('PFL/Coding/App WIP/V2')
runApp('GitHub/FootDB')
runApp('PFL/Coding/App WIP/V2')
runApp('PFL/Coding/App WIP/V2')
shiny::runApp('PFL/Coding/App WIP/V3 - Simplified App')
shiny::runApp('PFL/Coding/App WIP/V3 - Simplified App')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('PFL/Coding/App WIP/V3 - Simplified App')
runApp()
shiny::runApp('PFL/Coding/App WIP/V4_Simplified')
runApp('PFL/Coding/App WIP/V4_Simplified')
runApp('PFL/Coding/App WIP/V4_Simplified')
runApp('PFL/Coding/App WIP/V4_Simplified')
runApp('PFL/Coding/App WIP/V4_Simplified')
shiny::runApp('C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/BigData2021/FootScan Data/FootVolApp/SimplifiedApp')
runApp('C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/BigData2021/FootScan Data/FootVolApp/V2')
shiny::runApp('C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/BigData2021/FootScan Data/FootVolApp/V2')
rm(list=ls())
withinSubQualPlot <- function(inputDF) {
# direction can be 'lower' or higher'. It is the direction of change that is better.
# For example, for contact time lower is better. so we put 'lower'. for jump height, higher is better, so we put higher.
whichConfig <- inputDF %>%
group_by(Subject) %>%
summarize(
BestConfig = Config[which.max(OverallFit)]
)
whichConfig <- merge(inputDF, whichConfig)
ggplot(data = whichConfig, mapping = aes(x = as.factor(Config), y = OverallFit, col = BestConfig, group = Subject)) + geom_point(size = 4) +
geom_line() + xlab('Configuration') + scale_color_manual(values=c("#000000", "#00966C", "#ECE81A","#DC582A","#CAF0E4")) + theme(text = element_text(size = 26)) + ylab('Rating')
}
qualDat$Config <- factor(qualDat$Config, c('DD','SD'))
qualDat %>%
pivot_longer(cols = OverallFit:Heel,
names_to = "Location", values_to = "Rating") %>%
group_by(Location, Config) %>%
summarize(
avg = mean(Rating),
medAvg = median(Rating)
)
qualDat <- read_xlsx(file.choose())
rm(list=ls())
withinSubQualPlot <- function(inputDF) {
# direction can be 'lower' or higher'. It is the direction of change that is better.
# For example, for contact time lower is better. so we put 'lower'. for jump height, higher is better, so we put higher.
whichConfig <- inputDF %>%
group_by(Subject) %>%
summarize(
BestConfig = Config[which.max(OverallFit)]
)
whichConfig <- merge(inputDF, whichConfig)
ggplot(data = whichConfig, mapping = aes(x = as.factor(Config), y = OverallFit, col = BestConfig, group = Subject)) + geom_point(size = 4) +
geom_line() + xlab('Configuration') + scale_color_manual(values=c("#000000", "#00966C", "#ECE81A","#DC582A","#CAF0E4")) + theme(text = element_text(size = 26)) + ylab('Rating')
}
qualDat$Config <- factor(qualDat$Config, c('DD','SD'))
qualDat %>%
pivot_longer(cols = OverallFit:Heel,
names_to = "Location", values_to = "Rating") %>%
group_by(Location, Config) %>%
summarize(
avg = mean(Rating),
medAvg = median(Rating)
)
qualDat <- read_xlsx(file.choose())
library(readxl)
library(tm)
library(SnowballC)
library(RColorBrewer)
library(wordcloud)
library(readxl)
library(brms)
library(tidyverse)
qualDat <- read_xlsx(file.choose())
qualDat$Config <- factor(qualDat$Config, c('DD','SD')) #List baseline first
qualDat %>%
pivot_longer(cols = OverallFit:Heel,
names_to = "Location", values_to = "Rating") %>%
group_by(Location, Config) %>%
summarize(
avg = mean(Rating),
medAvg = median(Rating)
)
withinSubQualPlot(qualDat)
qualDat <- pivot_longer(qualDat, cols = Forefoot:Heel, names_to = 'Location', values_to = 'Rating')
qualDat$Location <- factor(qualDat$Location, c('Forefoot', 'Midfoot', 'Heel'))
ggplot(qualDat, mapping = aes(x = Rating, fill = Config)) + geom_density(alpha = 0.5) + facet_wrap(~Location) + scale_fill_manual(values=c("#000000", "#00966C", "#ECE81A","#DC582A","#CAF0E4"))
withinSubQualPlot <- function(inputDF) {
# direction can be 'lower' or higher'. It is the direction of change that is better.
# For example, for contact time lower is better. so we put 'lower'. for jump height, higher is better, so we put higher.
whichConfig <- inputDF %>%
group_by(Subject) %>%
summarize(
BestConfig = Config[which.max(OverallFit)]
)
whichConfig <- merge(inputDF, whichConfig)
ggplot(data = whichConfig, mapping = aes(x = as.factor(Config), y = OverallFit, col = BestConfig, group = Subject)) + geom_point(size = 4) +
geom_line() + xlab('Configuration') + scale_color_manual(values=c("#000000", "#00966C", "#ECE81A","#DC582A","#CAF0E4")) + theme(text = element_text(size = 26)) + ylab('Rating')
}
qualDat$Config <- factor(qualDat$Config, c('DD','SD'))
qualDat %>%
pivot_longer(cols = OverallFit:Heel,
names_to = "Location", values_to = "Rating") %>%
group_by(Location, Config) %>%
summarize(
avg = mean(Rating),
medAvg = median(Rating)
)
withinSubQualPlot(qualDat)
SL <- subset(qualDat, qualDat$Config == 'SD', GoodComments:BadComments)
replacePunctuation <- content_transformer(function(x) {return (gsub("[[:punct:]]", " ", x))})
makeWordCloud <- function(inputText) {
docs <- Corpus(VectorSource(inputText))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(replacePunctuation)
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("like", "feel","feels","lace","bottom","steel","replacement","toe.","toe",
"felt","tri", "na"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
vGood <- m[,1]
vBad <- m[,2]
vBad <- sort(vBad, decreasing = TRUE)
vGood <- sort(vGood, decreasing = TRUE)
vGood <- as.data.frame(vGood)
vBad <- as.data.frame(vBad)
colorList <- c(rep('dark green', nrow(vGood)), rep('grey', nrow(vBad)))
GoodWords <- rownames(vGood)
GoodFrq<- vGood[,1]
Good <- cbind(GoodWords, GoodFrq)
BadWords <- rownames(vBad)
BadFrq <- vBad[,1]
Bad <- cbind(BadWords, BadFrq)
d <- rbind(Good, Bad)
d <- cbind(d, colorList)
d <- as.data.frame(d)
colnames(d) <- c('Word', 'Freq', 'Color')
d <- d[order(d$Freq, decreasing = TRUE),]
d <- d[d$Freq > 0, ]
d$Freq <- as.numeric(d$Freq)
set.seed(1234)
wordcloud(d$Word, d$Freq, min.freq = 1, max.words = nrow(d),
random.order=FALSE, rot.per=0.35,
colors=d$Color, ordered.colors = TRUE)
}
makeWordCloud(SD)
SD <- subset(qualDat, qualDat$Config == 'SD', GoodComments:BadComments)
makeWordCloud(SD)
DD <- subset(qualDat, qualDat$Config == 'DD', GoodComments:BadComments)
makeWordCloud(DD)
shiny::runApp('C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/BigData2021/FootScan Data/FootVolApp/SimplifiedApp')
runApp('C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/BigData2021/FootScan Data/FootVolApp/V2')
runApp('C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/BigData2021/FootScan Data/FootVolApp/SimplifiedApp')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
shinyApp(ui, server)
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('PFL')
runApp('C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/BigData2021/FootScan Data/FootVolApp/V2')
runApp('PFL')
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('UMassTrail Running JC')
runApp('GitHub/FootDB')
runApp('GitHub/FootDB')
runApp('GitHub/FootDBOption2')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('PFL')
runApp('C:/Users/bethany.kilpatrick/Downloads/app (2).R')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Dan's FVA Option 2')
runApp('PFL/FootVolApp/Dan's FVA Option 2')
runApp('PFL/FootVolApp/Dans FVA Option 1')
runApp('PFL/FootVolApp/Dans FVA Option 2')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('~/PFL/FootVolApp/Dans Covid App/app (2).R')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
library(paletteer)
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp()
runApp()
runApp()
runApp('PFL/FootVolApp/Simplified_ V4')
brks <- quantile(df, probs = seq(.05,0.25,0.5,0.75, 0.95), na.rm = TRUE)
clrs <- round(seq(255, 40, length.out = length(brks) + 1), 0) %>%
{paste0("rgb(255,", ., ",", ., ")")}
datatable(df) %>% formatStyle(names(df), backgroundColor = styleInterval(brks, clrs)
)
## Only run this example in interactive R sessions
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
# DataTables example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris)
}
)
}
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Dans Covid App/app (2).R')
runApp('PFL/FootVolApp/Dans Covid App/app (2).R')
shinyApp(ui = ui, server = server)
shiny::runApp('PFL/FootVolApp/Simplified_ V4')
runApp('PFL/FootVolApp/Simplified_ V4')
shiny::runApp('PFL/FootVolApp/Simplified_V5_AetrexPercentiles/FootVolApp')
